---
- hosts: localhost
  tasks:
    - name: Install homebrew
      include_role:
        name: geerlingguy.mac.homebrew

    - name: Make sure homebrew bin is in path
      ansible.builtin.lineinfile:
        path: /etc/paths
        state: present
        line: "/opt/homebrew/bin"
      become: true
      become_user: root

    - name: "add custom homebrew repos"
      community.general.homebrew_tap:
        name: [
            adoptopenjdk/openjdk,
            fishtown-analytics/dbt,
            heroku/brew,
            # homebrew/cask-versions,  # deprecated
            thoughtbot/formulae,
            weaveworks/tap,
          ]

    - name: Install core packages via brew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
      ignore_errors: yes
      with_items:
        - 1password
        - docker
        - google-cloud-sdk
        - iterm2
        - ngrok
        - visual-studio-code
        - vlc
        - zoom
        - tuple

    - name: "Install homebrew packages"
      community.general.homebrew:
        name:
          [
            "autoconf",
            "automake",
            "aws-iam-authenticator",
            "awscli",
            "bfg",
            "coreutils",
            "curl",
            "dbt@0.18.0",
            "direnv",
            "dnsmasq",
            "fzf",
            "gnu-time",
            "gpg",
            "heroku",
            "htop",
            "imagemagick@6",
            "kubectx",
            "kubernetes-cli",
            "kubernetes-helm",
            "libtool",
            "libxslt",
            "libyaml",
            "mas",
            "openssl",
            "pkg-config",
            "postgresql",
            "rcm",
            "readline",
            "redis",
            "sqlite3",
            "tmux",
            "unixodbc",
            "unzip",
            "vim",
            "watchman",
            "xz",
            "yarn",
            "zlib",
            "zsh",
          ]
        state: present
        update_homebrew: yes

    - name: "Install my homebrew packages"
      community.general.homebrew:
        name:
          [
            "amethyst",
            "argocd",
            "background-music",
            "datasette",
            "direnv",
            "fd",
            "figlet",
            "flameshot",
            "fzf",
            "gawk",
            "gh",
            "git",
            "gitui",
            "glow",
            "htop",
            "jq",
            "k9s",
            "lazygit",
            "llm",
            "neofetch",
            "neovim",
            "node",
            "obs",
            "pyenv",
            "ripgrep",
            "spotify",
            "starship",
            "stow",
            "tmux",
            "tree-sitter",
            "vault",
            "vifm",
            "watch",
            "wget",
            "zsh-autosuggestions",
            "spacelift-io/spacelift/spacectl",
          ]
        state: present
        update_homebrew: false

    - name: "Install from Mac app store"
      shell: mas install {{ item }}
      with_items:
        - 497799835 # xcode

    - name: Make local bin
      ansible.builtin.file:
        path: "$HOME/.local/bin"
        state: directory
        mode: "0755"

    - name: Get the path to ZSH
      become: false
      local_action: command which zsh
      register: zsh_path

    - name: "Ensure homebrew zsh is in allowed shells"
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path.stdout }}"
      become: true

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"

    - name: Set ZSH as the default shell
      shell: chsh -s $(which zsh) {{ lookup('env', 'USER') }}
      become: true

    - name: Install Starship
      get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/install_starship.sh
      when: starship_installed.rc != 0

    - name: Run Starship installer
      shell: sh /tmp/install_starship.sh -y -b $HOME/.local/bin
      when: starship_installed.rc != 0

    - name: Install pipx
      pip:
        name: pipx
        state: present
        executable: pip3

    - name: Install yamlfmt with pipx
      shell: $HOME/.local/bin/pipx install yamlfmt

    - name: Install hatch with pipx
      shell: $HOME/.local/bin/pipx install hatch

    - name: Check if pyenv is installed
      stat:
        path: "~/.pyenv"
      register: pyenv_installed

    - name: Clone pyenv repository
      git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: "~/.pyenv"
      when: not pyenv_installed.stat.exists

    # Add something which ensures path is set here
    - name: Install VSCode extensions
      shell: code --install-extension {{ item }}
      with_items:
        - vscode-icons-team.vscode-icons
        - tamasfe.even-better-toml
        - mhutchie.git-graph
        - alefragnani.project-manager
        - ms-python.python
        - charliermarsh.ruff
        - Gruntfuggly.todo-tree
        - redhat.vscode-yaml
        - ms-azure-devops.azure-pipelines
        - christian-kohler.path-intellisense
        - ms-azuretools.vscode-docker
        - Codeium.codeium
        - GitHub.copilot
        - GitHub.copilot-chat
        - eamodio.gitlens
        - ms-vscode-remote.vscode-remote-extensionpack
        - ms-vscode.vscode-typescript-tslint-plugin
        - richie5um2.vscode-sort-json
        - Tyriar.sort-lines
        - vscodevim.vim
        - wholroyd.jinja
        - streetsidesoftware.code-spell-checker
        - fabiospampinato.vscode-todo-plus
        - ms-azuretools.vscode-docker
        - github.vscode-github-actions
        - GitHub.vscode-pull-request-github
        - skellock.just
        - ms-kubernetes-tools.vscode-kubernetes-tools
        - erd0s.terraform-autocomplete
        - dorzey.vscode-sqlfluff

    # - git:
    #     repo: https://github.com/asdf-vm/asdf.git
    #     dest: "/Users/{{ lookup('env', 'USER') }}/.asdf"
    #     version: v0.8.1

    # - name: "Create a default asdf configuration"
    #   template:
    #     src: templates/.asdfrc.j2
    #     dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
    #     owner: "{{ lookup('env', 'USER') }}"
    #     force: yes

    # - name: "Install asdf plugins"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf plugin-add {{ item }} || exit 0
    #   with_items:
    #     - ruby
    #     - elixir
    #     - nodejs
    #     - python
    #     - erlang

    # - name: "Install Default Python"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install python 3.10.0
    #     asdf global python 3.10.0
    #     pip3 install ansible
    #     asdf reshim python

    # - name: "Install Default Ruby"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install ruby 3.0.2
    #     asdf global ruby 3.0.2
    #     gem install bundler
    #     gem install cocoapods
    #     gem install rubocop
    #     gem install solargraph

    # - name: "Install default node"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     bash /Users/{{ lookup('env', 'USER') }}/.asdf/plugins/nodejs/bin/import-release-team-keyring
    #     asdf install nodejs 16.4.2
    #     asdf global nodejs 16.4.2

    # - name: "Install default erlang"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install erlang 24.0.2
    #     asdf global  erlang 24.0.2

    # - name: "Install default elixir"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install elixir 1.12.3-otp-24
    #     asdf global elixir 1.12.3-otp-24
    #     mix local.hex --force

    # - name: Install yarn packages
    #   shell: yarn global add {{ item }}
    #   with_items:
    #     - react-native-cli
    #     - create-react-app
    #     - apollo
    #     - generator-generator
    #     - yo

    # - name: re-generate bins now we've installed some yarn packages
    #   shell: asdf reshim nodejs
    - name: Install just
      shell: curl -sL https://just.systems/install.sh | bash -s -- --to $HOME/.local/bin
